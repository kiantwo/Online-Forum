import { Injectable, NgZone } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/compat/auth';
import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/compat/firestore';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { User } from './user';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  userData: any;
  private usersCollection: AngularFirestoreCollection<User>;
  user$!: Observable<User[]>;

  constructor(public afs: AngularFirestore, public afAuth: AngularFireAuth, public router: Router, public ngZone: NgZone) {
    //get user data from collection
    this.usersCollection = this.afs.collection<User>('users');
    this.user$ = this.usersCollection.valueChanges();

    //save user data in localstorage when logged in
    this.afAuth.authState.subscribe(user => {
      if (user) {
        this.userData = user;
        localStorage.setItem('user', JSON.stringify(this.userData));
        JSON.parse(localStorage.getItem('user') || '');

        //re-route user to forum page after successful login
        this.router.navigate(['main']);
      }

      else {
        localStorage.setItem('user', 'null');
        JSON.parse(localStorage.getItem('user') || '');
      }
    })
  }

  login(email: string, password: string) {
    return this.afAuth.signInWithEmailAndPassword(email, password).then((result) => {
      this.ngZone.run(() => {
        //re-route user to forum page after successful login
          //this.router.navigate(['main']);
      });

      //set uid of user from '' to uid generated by result
      //user.uid = result.user?.uid!;

      //set displayName of user from '' to user displayName
      //user.displayName = result.user?.displayName!;
      //this.SetUserData(user);

    }).catch((err) => {
      window.alert(err.message);
    })
  }

  register(user: User) {
    return this.afAuth.createUserWithEmailAndPassword(user.email, user.password).then((result) => {
      //set result.displayName to user.displayName
      //(result.displayName will always be set to null on creation unless .updateProfile is called)
      result.user?.updateProfile({
        displayName: user.displayName
      })

      //set uid of user from '' to uid generated by result
      user.uid = result.user?.uid!;
      this.SetUserData(user); 

      //re-route user to login page after successful registration
        //this.router.navigate(['']);

    }).catch((err) => {
      window.alert(err.message)
    })
  }

  SetUserData(user: any) {
    const userRef: AngularFirestoreDocument<User> = this.afs.doc(`users/${user.uid}`);

    //assigning data to be stored in Firestore Database Document
    const userData: User = {
      uid: user.uid,
      email: user.email,
      displayName: user.displayName,
      password: user.password,
      isAdmin: user.isAdmin
    }

    //create document in Firestore Database
    return userRef.set(userData, {
      merge: true
    })
  }

  logout() {
    return this.afAuth.signOut().then(() => {
      localStorage.removeItem('user');
      this.userData = null;
      this.router.navigate(['login']);
    })
  }

  get isLoggedIn(): boolean {
    const user = JSON.parse(localStorage.getItem('user') || '');
    return user !== null ? true : false;
  }

  //(partial) trying to get data of currentUser from firestore to display in main page
  /*getLoggedInData(uid: string) {
    let userData: User;

    this.afs.collection('users').doc(uid).get().subscribe((value) => {
      if (value) {
        userData = {
          uid: value.get('uid'),
          displayName: value.get('displayName'),
          email: value.get('email'),
          password: value.get('password')
        }
        console.log(userData);
      }
    });
  }*/

  //get all users from firestore
  getUsers() {
    return this.user$;
  }
}
